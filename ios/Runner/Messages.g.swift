// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsMessages(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsMessages(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsMessages(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashMessages(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashMessages(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashMessages(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Generated class from Pigeon that represents data sent in messages.
struct MediaCreateInput: Hashable {
  var libVlcId: Int64? = nil
  var dataSourceType: Int64? = nil
  var dataSourceValue: String? = nil
  var packageName: String? = nil
  var hwAcc: Int64? = nil
  var options: [String]? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MediaCreateInput? {
    let libVlcId: Int64? = nilOrValue(pigeonVar_list[0])
    let dataSourceType: Int64? = nilOrValue(pigeonVar_list[1])
    let dataSourceValue: String? = nilOrValue(pigeonVar_list[2])
    let packageName: String? = nilOrValue(pigeonVar_list[3])
    let hwAcc: Int64? = nilOrValue(pigeonVar_list[4])
    let options: [String]? = nilOrValue(pigeonVar_list[5])

    return MediaCreateInput(
      libVlcId: libVlcId,
      dataSourceType: dataSourceType,
      dataSourceValue: dataSourceValue,
      packageName: packageName,
      hwAcc: hwAcc,
      options: options
    )
  }
  func toList() -> [Any?] {
    return [
      libVlcId,
      dataSourceType,
      dataSourceValue,
      packageName,
      hwAcc,
      options,
    ]
  }
  static func == (lhs: MediaCreateInput, rhs: MediaCreateInput) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MediaVideoTrack: Hashable {
  var duration: Int64? = nil
  var height: Int64? = nil
  var width: Int64? = nil
  var sarNum: Int64? = nil
  var sarDen: Int64? = nil
  var frameRateNum: Int64? = nil
  var frameRateDen: Int64? = nil
  var orientation: Int64? = nil
  var projection: Int64? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MediaVideoTrack? {
    let duration: Int64? = nilOrValue(pigeonVar_list[0])
    let height: Int64? = nilOrValue(pigeonVar_list[1])
    let width: Int64? = nilOrValue(pigeonVar_list[2])
    let sarNum: Int64? = nilOrValue(pigeonVar_list[3])
    let sarDen: Int64? = nilOrValue(pigeonVar_list[4])
    let frameRateNum: Int64? = nilOrValue(pigeonVar_list[5])
    let frameRateDen: Int64? = nilOrValue(pigeonVar_list[6])
    let orientation: Int64? = nilOrValue(pigeonVar_list[7])
    let projection: Int64? = nilOrValue(pigeonVar_list[8])

    return MediaVideoTrack(
      duration: duration,
      height: height,
      width: width,
      sarNum: sarNum,
      sarDen: sarDen,
      frameRateNum: frameRateNum,
      frameRateDen: frameRateDen,
      orientation: orientation,
      projection: projection
    )
  }
  func toList() -> [Any?] {
    return [
      duration,
      height,
      width,
      sarNum,
      sarDen,
      frameRateNum,
      frameRateDen,
      orientation,
      projection,
    ]
  }
  static func == (lhs: MediaVideoTrack, rhs: MediaVideoTrack) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct VideoViewCreateResult: Hashable {
  var objectId: Int64? = nil
  var textureId: Int64? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> VideoViewCreateResult? {
    let objectId: Int64? = nilOrValue(pigeonVar_list[0])
    let textureId: Int64? = nilOrValue(pigeonVar_list[1])

    return VideoViewCreateResult(
      objectId: objectId,
      textureId: textureId
    )
  }
  func toList() -> [Any?] {
    return [
      objectId,
      textureId,
    ]
  }
  static func == (lhs: VideoViewCreateResult, rhs: VideoViewCreateResult) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return MediaCreateInput.fromList(self.readValue() as! [Any?])
    case 130:
      return MediaVideoTrack.fromList(self.readValue() as! [Any?])
    case 131:
      return VideoViewCreateResult.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? MediaCreateInput {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? MediaVideoTrack {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? VideoViewCreateResult {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol VlcApi {
  /// LibVLC
  func createLibVlc(options: [String]?, completion: @escaping (Result<Int64, Error>) -> Void)
  func disposeLibVlc(libVlcId: Int64, completion: @escaping (Result<Bool, Error>) -> Void)
  /// Media
  func createMedia(input: MediaCreateInput, completion: @escaping (Result<Int64, Error>) -> Void)
  func setMediaEventListener(mediaId: Int64, completion: @escaping (Result<Bool, Error>) -> Void)
  func mediaParseAsync(mediaId: Int64, completion: @escaping (Result<Bool, Error>) -> Void)
  func mediaGetVideoTrack(mediaId: Int64, completion: @escaping (Result<MediaVideoTrack, Error>) -> Void)
  func disposeMedia(mediaId: Int64, completion: @escaping (Result<Bool, Error>) -> Void)
  /// MediaPlayer
  func createMediaPlayer(libVlcId: Int64, completion: @escaping (Result<Int64, Error>) -> Void)
  func mediaPlayerSetMedia(mediaPlayerId: Int64, mediaId: Int64, completion: @escaping (Result<Bool, Error>) -> Void)
  func mediaPlayerAttachVideoView(mediaPlayerId: Int64, videoViewId: Int64, completion: @escaping (Result<Bool, Error>) -> Void)
  func mediaPlayerPlay(mediaPlayerId: Int64, completion: @escaping (Result<Bool, Error>) -> Void)
  func mediaPlayerPause(mediaPlayerId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func mediaPlayerStop(mediaPlayerId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func mediaPlayerIsPlaying(mediaPlayerId: Int64, completion: @escaping (Result<Bool, Error>) -> Void)
  func mediaPlayerSetTime(mediaPlayerId: Int64, time: Int64, fast: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func mediaPlayerGetTime(mediaPlayerId: Int64, completion: @escaping (Result<Int64, Error>) -> Void)
  func mediaPlayerSetPosition(mediaPlayerId: Int64, position: Double, fast: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func mediaPlayerGetPosition(mediaPlayerId: Int64, completion: @escaping (Result<Double, Error>) -> Void)
  func mediaPlayerGetLength(mediaPlayerId: Int64, completion: @escaping (Result<Int64, Error>) -> Void)
  func mediaPlayerSetVolume(mediaPlayerId: Int64, volume: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func mediaPlayerGetVolume(mediaPlayerId: Int64, completion: @escaping (Result<Int64, Error>) -> Void)
  func mediaPlayerSetRate(mediaPlayerId: Int64, rate: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func mediaPlayerGetRate(mediaPlayerId: Int64, completion: @escaping (Result<Double, Error>) -> Void)
  func disposeMediaPlayer(mediaPlayerId: Int64, completion: @escaping (Result<Bool, Error>) -> Void)
  /// Video View
  func createVideoView(completion: @escaping (Result<VideoViewCreateResult, Error>) -> Void)
  func videoViewSetDefaultBufferSize(videoViewId: Int64, width: Int64, height: Int64, completion: @escaping (Result<Bool, Error>) -> Void)
  func disposeVideoView(videoViewId: Int64, completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class VlcApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `VlcApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: VlcApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// LibVLC
    let createLibVlcChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.createLibVlc\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createLibVlcChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let optionsArg: [String]? = nilOrValue(args[0])
        api.createLibVlc(options: optionsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createLibVlcChannel.setMessageHandler(nil)
    }
    let disposeLibVlcChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.disposeLibVlc\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeLibVlcChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let libVlcIdArg = args[0] as! Int64
        api.disposeLibVlc(libVlcId: libVlcIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      disposeLibVlcChannel.setMessageHandler(nil)
    }
    /// Media
    let createMediaChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.createMedia\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createMediaChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let inputArg = args[0] as! MediaCreateInput
        api.createMedia(input: inputArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createMediaChannel.setMessageHandler(nil)
    }
    let setMediaEventListenerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.setMediaEventListener\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setMediaEventListenerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaIdArg = args[0] as! Int64
        api.setMediaEventListener(mediaId: mediaIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setMediaEventListenerChannel.setMessageHandler(nil)
    }
    let mediaParseAsyncChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaParseAsync\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaParseAsyncChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaIdArg = args[0] as! Int64
        api.mediaParseAsync(mediaId: mediaIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaParseAsyncChannel.setMessageHandler(nil)
    }
    let mediaGetVideoTrackChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaGetVideoTrack\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaGetVideoTrackChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaIdArg = args[0] as! Int64
        api.mediaGetVideoTrack(mediaId: mediaIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaGetVideoTrackChannel.setMessageHandler(nil)
    }
    let disposeMediaChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.disposeMedia\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeMediaChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaIdArg = args[0] as! Int64
        api.disposeMedia(mediaId: mediaIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      disposeMediaChannel.setMessageHandler(nil)
    }
    /// MediaPlayer
    let createMediaPlayerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.createMediaPlayer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createMediaPlayerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let libVlcIdArg = args[0] as! Int64
        api.createMediaPlayer(libVlcId: libVlcIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createMediaPlayerChannel.setMessageHandler(nil)
    }
    let mediaPlayerSetMediaChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerSetMedia\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerSetMediaChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        let mediaIdArg = args[1] as! Int64
        api.mediaPlayerSetMedia(mediaPlayerId: mediaPlayerIdArg, mediaId: mediaIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerSetMediaChannel.setMessageHandler(nil)
    }
    let mediaPlayerAttachVideoViewChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerAttachVideoView\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerAttachVideoViewChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        let videoViewIdArg = args[1] as! Int64
        api.mediaPlayerAttachVideoView(mediaPlayerId: mediaPlayerIdArg, videoViewId: videoViewIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerAttachVideoViewChannel.setMessageHandler(nil)
    }
    let mediaPlayerPlayChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerPlay\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerPlayChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        api.mediaPlayerPlay(mediaPlayerId: mediaPlayerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerPlayChannel.setMessageHandler(nil)
    }
    let mediaPlayerPauseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerPause\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerPauseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        api.mediaPlayerPause(mediaPlayerId: mediaPlayerIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerPauseChannel.setMessageHandler(nil)
    }
    let mediaPlayerStopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerStop\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerStopChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        api.mediaPlayerStop(mediaPlayerId: mediaPlayerIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerStopChannel.setMessageHandler(nil)
    }
    let mediaPlayerIsPlayingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerIsPlaying\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerIsPlayingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        api.mediaPlayerIsPlaying(mediaPlayerId: mediaPlayerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerIsPlayingChannel.setMessageHandler(nil)
    }
    let mediaPlayerSetTimeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerSetTime\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerSetTimeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        let timeArg = args[1] as! Int64
        let fastArg = args[2] as! Bool
        api.mediaPlayerSetTime(mediaPlayerId: mediaPlayerIdArg, time: timeArg, fast: fastArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerSetTimeChannel.setMessageHandler(nil)
    }
    let mediaPlayerGetTimeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerGetTime\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerGetTimeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        api.mediaPlayerGetTime(mediaPlayerId: mediaPlayerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerGetTimeChannel.setMessageHandler(nil)
    }
    let mediaPlayerSetPositionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerSetPosition\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerSetPositionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        let positionArg = args[1] as! Double
        let fastArg = args[2] as! Bool
        api.mediaPlayerSetPosition(mediaPlayerId: mediaPlayerIdArg, position: positionArg, fast: fastArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerSetPositionChannel.setMessageHandler(nil)
    }
    let mediaPlayerGetPositionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerGetPosition\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerGetPositionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        api.mediaPlayerGetPosition(mediaPlayerId: mediaPlayerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerGetPositionChannel.setMessageHandler(nil)
    }
    let mediaPlayerGetLengthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerGetLength\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerGetLengthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        api.mediaPlayerGetLength(mediaPlayerId: mediaPlayerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerGetLengthChannel.setMessageHandler(nil)
    }
    let mediaPlayerSetVolumeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerSetVolume\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerSetVolumeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        let volumeArg = args[1] as! Int64
        api.mediaPlayerSetVolume(mediaPlayerId: mediaPlayerIdArg, volume: volumeArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerSetVolumeChannel.setMessageHandler(nil)
    }
    let mediaPlayerGetVolumeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerGetVolume\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerGetVolumeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        api.mediaPlayerGetVolume(mediaPlayerId: mediaPlayerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerGetVolumeChannel.setMessageHandler(nil)
    }
    let mediaPlayerSetRateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerSetRate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerSetRateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        let rateArg = args[1] as! Double
        api.mediaPlayerSetRate(mediaPlayerId: mediaPlayerIdArg, rate: rateArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerSetRateChannel.setMessageHandler(nil)
    }
    let mediaPlayerGetRateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.mediaPlayerGetRate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mediaPlayerGetRateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        api.mediaPlayerGetRate(mediaPlayerId: mediaPlayerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      mediaPlayerGetRateChannel.setMessageHandler(nil)
    }
    let disposeMediaPlayerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.disposeMediaPlayer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeMediaPlayerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mediaPlayerIdArg = args[0] as! Int64
        api.disposeMediaPlayer(mediaPlayerId: mediaPlayerIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      disposeMediaPlayerChannel.setMessageHandler(nil)
    }
    /// Video View
    let createVideoViewChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.createVideoView\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createVideoViewChannel.setMessageHandler { _, reply in
        api.createVideoView { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createVideoViewChannel.setMessageHandler(nil)
    }
    let videoViewSetDefaultBufferSizeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.videoViewSetDefaultBufferSize\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      videoViewSetDefaultBufferSizeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let videoViewIdArg = args[0] as! Int64
        let widthArg = args[1] as! Int64
        let heightArg = args[2] as! Int64
        api.videoViewSetDefaultBufferSize(videoViewId: videoViewIdArg, width: widthArg, height: heightArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      videoViewSetDefaultBufferSizeChannel.setMessageHandler(nil)
    }
    let disposeVideoViewChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.disposeVideoView\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeVideoViewChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let videoViewIdArg = args[0] as! Int64
        api.disposeVideoView(videoViewId: videoViewIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      disposeVideoViewChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol VlcFlutterApiProtocol {
  func onMediaEvent(mediaId mediaIdArg: Int64, event eventArg: Int64, completion: @escaping (Result<Bool, PigeonError>) -> Void)
}
class VlcFlutterApi: VlcFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: MessagesPigeonCodec {
    return MessagesPigeonCodec.shared
  }
  func onMediaEvent(mediaId mediaIdArg: Int64, event eventArg: Int64, completion: @escaping (Result<Bool, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.shinezzl.vlc_player.VlcFlutterApi.onMediaEvent\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([mediaIdArg, eventArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! Bool
        completion(.success(result))
      }
    }
  }
}
