// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface VLC_PLAYERLibVlcInput ()
+ (VLC_PLAYERLibVlcInput *)fromList:(NSArray<id> *)list;
+ (nullable VLC_PLAYERLibVlcInput *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface VLC_PLAYERLibVlcOutput ()
+ (VLC_PLAYERLibVlcOutput *)fromList:(NSArray<id> *)list;
+ (nullable VLC_PLAYERLibVlcOutput *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface VLC_PLAYERMediaInput ()
+ (VLC_PLAYERMediaInput *)fromList:(NSArray<id> *)list;
+ (nullable VLC_PLAYERMediaInput *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface VLC_PLAYERMediaOutput ()
+ (VLC_PLAYERMediaOutput *)fromList:(NSArray<id> *)list;
+ (nullable VLC_PLAYERMediaOutput *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface VLC_PLAYERMediaPlayerInput ()
+ (VLC_PLAYERMediaPlayerInput *)fromList:(NSArray<id> *)list;
+ (nullable VLC_PLAYERMediaPlayerInput *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface VLC_PLAYERMediaPlayerOutput ()
+ (VLC_PLAYERMediaPlayerOutput *)fromList:(NSArray<id> *)list;
+ (nullable VLC_PLAYERMediaPlayerOutput *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation VLC_PLAYERLibVlcInput
+ (instancetype)makeWithOptions:(nullable NSArray<NSString *> *)options {
  VLC_PLAYERLibVlcInput* pigeonResult = [[VLC_PLAYERLibVlcInput alloc] init];
  pigeonResult.options = options;
  return pigeonResult;
}
+ (VLC_PLAYERLibVlcInput *)fromList:(NSArray<id> *)list {
  VLC_PLAYERLibVlcInput *pigeonResult = [[VLC_PLAYERLibVlcInput alloc] init];
  pigeonResult.options = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable VLC_PLAYERLibVlcInput *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [VLC_PLAYERLibVlcInput fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.options ?: [NSNull null],
  ];
}
@end

@implementation VLC_PLAYERLibVlcOutput
+ (instancetype)makeWithLibVlcId:(nullable NSNumber *)libVlcId {
  VLC_PLAYERLibVlcOutput* pigeonResult = [[VLC_PLAYERLibVlcOutput alloc] init];
  pigeonResult.libVlcId = libVlcId;
  return pigeonResult;
}
+ (VLC_PLAYERLibVlcOutput *)fromList:(NSArray<id> *)list {
  VLC_PLAYERLibVlcOutput *pigeonResult = [[VLC_PLAYERLibVlcOutput alloc] init];
  pigeonResult.libVlcId = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable VLC_PLAYERLibVlcOutput *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [VLC_PLAYERLibVlcOutput fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.libVlcId ?: [NSNull null],
  ];
}
@end

@implementation VLC_PLAYERMediaInput
+ (instancetype)makeWithLibVlcId:(nullable NSNumber *)libVlcId
    dataSourceType:(nullable NSNumber *)dataSourceType
    dataSourceValue:(nullable NSString *)dataSourceValue
    package:(nullable NSString *)package
    hwAcc:(nullable NSNumber *)hwAcc
    options:(nullable NSArray<NSString *> *)options {
  VLC_PLAYERMediaInput* pigeonResult = [[VLC_PLAYERMediaInput alloc] init];
  pigeonResult.libVlcId = libVlcId;
  pigeonResult.dataSourceType = dataSourceType;
  pigeonResult.dataSourceValue = dataSourceValue;
  pigeonResult.package = package;
  pigeonResult.hwAcc = hwAcc;
  pigeonResult.options = options;
  return pigeonResult;
}
+ (VLC_PLAYERMediaInput *)fromList:(NSArray<id> *)list {
  VLC_PLAYERMediaInput *pigeonResult = [[VLC_PLAYERMediaInput alloc] init];
  pigeonResult.libVlcId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.dataSourceType = GetNullableObjectAtIndex(list, 1);
  pigeonResult.dataSourceValue = GetNullableObjectAtIndex(list, 2);
  pigeonResult.package = GetNullableObjectAtIndex(list, 3);
  pigeonResult.hwAcc = GetNullableObjectAtIndex(list, 4);
  pigeonResult.options = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable VLC_PLAYERMediaInput *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [VLC_PLAYERMediaInput fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.libVlcId ?: [NSNull null],
    self.dataSourceType ?: [NSNull null],
    self.dataSourceValue ?: [NSNull null],
    self.package ?: [NSNull null],
    self.hwAcc ?: [NSNull null],
    self.options ?: [NSNull null],
  ];
}
@end

@implementation VLC_PLAYERMediaOutput
+ (instancetype)makeWithMediaId:(nullable NSNumber *)mediaId {
  VLC_PLAYERMediaOutput* pigeonResult = [[VLC_PLAYERMediaOutput alloc] init];
  pigeonResult.mediaId = mediaId;
  return pigeonResult;
}
+ (VLC_PLAYERMediaOutput *)fromList:(NSArray<id> *)list {
  VLC_PLAYERMediaOutput *pigeonResult = [[VLC_PLAYERMediaOutput alloc] init];
  pigeonResult.mediaId = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable VLC_PLAYERMediaOutput *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [VLC_PLAYERMediaOutput fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.mediaId ?: [NSNull null],
  ];
}
@end

@implementation VLC_PLAYERMediaPlayerInput
+ (instancetype)makeWithLibVlcId:(nullable NSNumber *)libVlcId {
  VLC_PLAYERMediaPlayerInput* pigeonResult = [[VLC_PLAYERMediaPlayerInput alloc] init];
  pigeonResult.libVlcId = libVlcId;
  return pigeonResult;
}
+ (VLC_PLAYERMediaPlayerInput *)fromList:(NSArray<id> *)list {
  VLC_PLAYERMediaPlayerInput *pigeonResult = [[VLC_PLAYERMediaPlayerInput alloc] init];
  pigeonResult.libVlcId = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable VLC_PLAYERMediaPlayerInput *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [VLC_PLAYERMediaPlayerInput fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.libVlcId ?: [NSNull null],
  ];
}
@end

@implementation VLC_PLAYERMediaPlayerOutput
+ (instancetype)makeWithMediaPlayerId:(nullable NSNumber *)mediaPlayerId {
  VLC_PLAYERMediaPlayerOutput* pigeonResult = [[VLC_PLAYERMediaPlayerOutput alloc] init];
  pigeonResult.mediaPlayerId = mediaPlayerId;
  return pigeonResult;
}
+ (VLC_PLAYERMediaPlayerOutput *)fromList:(NSArray<id> *)list {
  VLC_PLAYERMediaPlayerOutput *pigeonResult = [[VLC_PLAYERMediaPlayerOutput alloc] init];
  pigeonResult.mediaPlayerId = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable VLC_PLAYERMediaPlayerOutput *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [VLC_PLAYERMediaPlayerOutput fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.mediaPlayerId ?: [NSNull null],
  ];
}
@end

@interface VLC_PLAYERMessagesPigeonCodecReader : FlutterStandardReader
@end
@implementation VLC_PLAYERMessagesPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: 
      return [VLC_PLAYERLibVlcInput fromList:[self readValue]];
    case 130: 
      return [VLC_PLAYERLibVlcOutput fromList:[self readValue]];
    case 131: 
      return [VLC_PLAYERMediaInput fromList:[self readValue]];
    case 132: 
      return [VLC_PLAYERMediaOutput fromList:[self readValue]];
    case 133: 
      return [VLC_PLAYERMediaPlayerInput fromList:[self readValue]];
    case 134: 
      return [VLC_PLAYERMediaPlayerOutput fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface VLC_PLAYERMessagesPigeonCodecWriter : FlutterStandardWriter
@end
@implementation VLC_PLAYERMessagesPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[VLC_PLAYERLibVlcInput class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[VLC_PLAYERLibVlcOutput class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[VLC_PLAYERMediaInput class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[VLC_PLAYERMediaOutput class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[VLC_PLAYERMediaPlayerInput class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[VLC_PLAYERMediaPlayerOutput class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface VLC_PLAYERMessagesPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation VLC_PLAYERMessagesPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[VLC_PLAYERMessagesPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[VLC_PLAYERMessagesPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *VLC_PLAYERGetMessagesCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    VLC_PLAYERMessagesPigeonCodecReaderWriter *readerWriter = [[VLC_PLAYERMessagesPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpVLC_PLAYERVlcApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<VLC_PLAYERVlcApi> *api) {
  SetUpVLC_PLAYERVlcApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpVLC_PLAYERVlcApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<VLC_PLAYERVlcApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.createLibVlc", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:VLC_PLAYERGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createLibVlcInput:completion:)], @"VLC_PLAYERVlcApi api (%@) doesn't respond to @selector(createLibVlcInput:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        VLC_PLAYERLibVlcInput *arg_input = GetNullableObjectAtIndex(args, 0);
        [api createLibVlcInput:arg_input completion:^(VLC_PLAYERLibVlcOutput *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.createMedia", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:VLC_PLAYERGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createMediaInput:completion:)], @"VLC_PLAYERVlcApi api (%@) doesn't respond to @selector(createMediaInput:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        VLC_PLAYERMediaInput *arg_input = GetNullableObjectAtIndex(args, 0);
        [api createMediaInput:arg_input completion:^(VLC_PLAYERMediaOutput *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.com.shinezzl.vlc_player.VlcApi.createMediaPlayer", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:VLC_PLAYERGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createMediaPlayerInput:completion:)], @"VLC_PLAYERVlcApi api (%@) doesn't respond to @selector(createMediaPlayerInput:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        VLC_PLAYERMediaPlayerInput *arg_input = GetNullableObjectAtIndex(args, 0);
        [api createMediaPlayerInput:arg_input completion:^(VLC_PLAYERMediaPlayerOutput *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
